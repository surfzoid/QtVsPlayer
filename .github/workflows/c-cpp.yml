name: CI

on: [push, pull_request]

jobs:
  native:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Checkout onto ${{ runner.os }}
        uses: actions/checkout@v2.1.0
      - name: Setup C++ environment
        uses: kurocha/setup-cpp@v1
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
      - name: apt install qt5-qmake-bin
        run: sudo apt update & sudo apt install -y qt5-qmake-bin qt5-default g++ make libqt5multimediawidgets5 qtmultimedia5-dev libqt5widgets5 curl ca-certificates build-essential rpm

      - name: Prepare install dir
        run: |
            mkdir -p .debpkg
            # create DEBIAN directory if you want to add other pre/post scripts
            mkdir -p .debpkg/DEBIAN
            echo "echo postinst" > .debpkg/DEBIAN/postinst
            echo "mv -f /usr/lib64/lib* /usr/lib/" >> .debpkg/DEBIAN/postinst
            echo "rm -fr /usr/lib64" >> .debpkg/DEBIAN/postinst
            chmod +x .debpkg/DEBIAN/postinst
            echo -e "Automatic build from GitHub action, see QtVsPlayer.spec for change log" > CHANGELOG


      - name: qmake
        run: PREFIX=.debpkg/usr/share; qmake
        env:
          PREFIX: .debpkg/usr/share
          INSTALL_ROOT: .debpkg/usr/share
      - name: make
        run: make
      - name: make check
        run: make check

      - name: make install
        run: INSTALL_ROOT=.debpkg/usr/share; make install

      - name: Version
        run: echo "::set-output name=version::$(head -n 1 ./QtVsPlayer.pro| cut -d ' ' -f 3)"
        id: version

      - name: build-deb-action
        uses: jiro4989/build-deb-action@v2.1.0
        with:
          package: QtVsPlayer
          package_root: .debpkg
          maintainer: surfzoid
          version: ${{ steps.version.outputs.version }} # ${{ github.ref }} # refs/tags/v*.*.*
          arch: 'amd64'
          depends: 'libqt5multimedia5, libqt5multimediawidgets5' #libc6 (>= 2.2.1),
          desc: 'QtVsPlayer can read local video files of Hikvision and display blue, green and red vector.'
      - name: del DEBIAN
        run: sudo rm -fr .debpkg/DEBIAN

      - uses: jiro4989/build-rpm-action@v2
        with:
          summary: 'QtVsPlayer can read local video files of Hikvision and display blue, green and red vector.'
          package: QtVsPlayer
          package_root: .debpkg
          maintainer: surfzoid
          version: ${{ steps.version.outputs.version }}
          arch: 'x86_64'
          desc: 'QtVsPlayer Hikvision .'

      - name: Rename package with te good arch/distro
        run: |
          for f in $(find ./|grep -i "deb$"); do
          echo -e $f
          echo ${f//amd64/${{ matrix.os }}-amd64}
          ef=${f//amd64/${{ matrix.os }}-amd64}
          echo $ef
          mv $f $ef
          done

      - name: Create Github Release
        uses: ncipollo/release-action@v1.11.1
        id: create_release
        with:
          artifacts: "QtVsPlayer-${{ steps.version.outputs.version }}*,QtVsPlayer_${{ steps.version.outputs.version }}*,QtVsPlayer-debuginfo*"
          replacesArtifacts: true
          token: ${{ github.TOKEN }}
          allowUpdates: true
          name: ${{ steps.version.outputs.version }}
          tag: ${{ steps.version.outputs.version }}
          body: "Automatic build from GitHub action, see QtVsPlayer.spec for change log"


      - name: clean
        run:
            rm  -fr .debpkg

  cross:
    name: RPI_P400-ARM64
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - uses: actions/checkout@v2.1.0

      - name: Version
        run: echo "::set-output name=version::$(head -n 1 ./QtVsPlayer.pro| cut -d ' ' -f 3)"
        id: version

      - name: Prepare install dir
        run: |
            mkdir -p .debpkg
            # create DEBIAN directory if you want to add other pre/post scripts
            mkdir -p .debpkg/DEBIAN
            echo "echo postinst" > .debpkg/DEBIAN/postinst
            echo "mv -f /usr/lib64/lib* /usr/lib/" >> .debpkg/DEBIAN/postinst
            echo "rm -fr /usr/lib64" >> .debpkg/DEBIAN/postinst
            chmod +x .debpkg/DEBIAN/postinst
            echo -e "Automatic build from GitHub action, see QtVsPlayer.spec for change log" > CHANGELOG

      - name: qmake
        run: PREFIX=.debpkg/usr/share; qmake
        env:
          PREFIX: .debpkg/usr/share
          INSTALL_ROOT: .debpkg/usr/share
      - name: make
        run: make
      - name: make check
        run: make check

      - name: make install
        run: INSTALL_ROOT=.debpkg/usr/share; make install

      - name: Installed-Size
        run: echo "::set-output name=installed::$(echo `du -s .debpkg/usr` | awk '{print $1;}')"
        id: size

      - name: Build control file
        run: |
            cat << 'EOF' > .debpkg/DEBIAN/control
            Package: QtVsPlayer
            Version: ${{ steps.version.outputs.version }}
            Installed-Size: ${{ steps.installed.outputs.size }}
            Architecture: arm64
            Maintainer: surfzoid
            Depends: libc6 (>= 2.31),libqt5multimedia5:arm64, libqt5multimediawidgets5:arm64
            Description: QtVsPlayer can read local video files of Hikvision and display blue, green and red vector.

            EOF

      - name: Build debian package
        run: |
            dpkg-deb -b .debpkg QtVsPlayer_${{ steps.version.outputs.version }}_`lsb_release -cs`-arm64.deb
      
      - name: del DEBIAN
        run: sudo rm -fr .debpkg/DEBIAN

      - name: Build RPM package
        run: |
            set -x
            rm -fr /tmp/work
            mkdir /tmp/work
            cp -rp .debpkg /tmp/work/QtVsPlayer
            mkdir -p ~/rpmbuild/{SRPMS,SOURCES,SPECS,tmp}
            cp -pf QtVsPlayer.spec ~/rpmbuild/SPECS
            sed -i 's/\(Source:\).*/\1         tmp.tar.gz/' ~/rpmbuild/SPECS/QtVsPlayer.spec
            sed -i 's/\(Release:\).*/\1         1/' ~/rpmbuild/SPECS/QtVsPlayer.spec
            sed -i '/^BuildRequires/d' ~/rpmbuild/SPECS/QtVsPlayer.spec
            sed -i '/^Requires/d' ~/rpmbuild/SPECS/QtVsPlayer.spec
            sed -i '/^%qmake_qt5/d' ~/rpmbuild/SPECS/QtVsPlayer.spec
            sed -i '/^qmake/d' ~/rpmbuild/SPECS/QtVsPlayer.spec
            sed -i 's/\(%install\).*/\1\ncp -fr %{_builddir}\/QtVsPlayer\/* %{buildroot}/' ~/rpmbuild/SPECS/QtVsPlayer.spec
            sed -i '/^make INSTALL_ROOT/d' ~/rpmbuild/SPECS/QtVsPlayer.spec
            cd /tmp/work
            tar czf tmp.tar.gz QtVsPlayer/
            mv tmp.tar.gz ~/rpmbuild/SOURCES
            rpmbuild -bb ~/rpmbuild/SPECS/QtVsPlayer.spec
            cp -f ~/rpmbuild/RPMS/aarch64/QtVsPlayer-${{ steps.version.outputs.version }}* ${{ github.workspace }}

      - name: Create Github Release
        uses: ncipollo/release-action@v1.11.1
        id: create_release
        with:
          artifacts: "QtVsPlayer-${{ steps.version.outputs.version }}*,QtVsPlayer_${{ steps.version.outputs.version }}*,QtVsPlayer-debuginfo*"
          replacesArtifacts: true
          token: ${{ github.TOKEN }}
          allowUpdates: true
          name: ${{ steps.version.outputs.version }}
          tag: ${{ steps.version.outputs.version }}
          body: "Automatic build from GitHub action, see QtVsPlayer.spec for change log"

  windoze:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
        CC: gcc-${{ matrix.gcc }}
        CXX: g++-${{ matrix.gcc }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
    steps:
      - uses: actions/checkout@v2.1.0

      - name: Version
        run: echo "::set-output name=version::$(head -n 1 ./QtVsPlayer.pro| cut -d ' ' -f 3)"
        id: version

      - name: Check Version
        run: echo ${{ steps.version.outputs.version }}

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'


      - name: qmake
        run: |
            qmake -Wnone
            #cat "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"

      - name: make
        run: |
            sed -i 's/\(CC            = \).*/\1gcc/' Makefile.Release
            sed -i 's/\(CXX           = \).*/\1g++/' Makefile.Release
            cat Makefile.Release
            #sed -e 's@\\\([^ ]\)@/\1@g' -e 's@[cC]:@/cygdrive/c@' -i Makefile.Release
            mingw32-make